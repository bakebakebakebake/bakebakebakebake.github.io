<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello</title>
    <url>/posts/f7d18982/</url>
    <content><![CDATA[<blockquote>
<p>This is a <strong>Test</strong>.</p>
</blockquote>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>1907</title>
    <url>/posts/25920d3b/</url>
    <content><![CDATA[<p><mark style="background: #FF5582A6;">Codeforces Round 913 (Div. 3)</mark> #div3</p>
<h2 id="A-Rook"><a href="#A-Rook" class="headerlink" title="A Rook"></a>A Rook</h2><h1 id="cf800"><a href="#cf800" class="headerlink" title="cf800"></a>cf800</h1><p>比较简单</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">string a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==a[<span class="number">1</span>]<span class="number">-48</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="string">&#x27;a&#x27;</span>; i &lt;= <span class="string">&#x27;h&#x27;</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==a[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            cout &lt;&lt; (<span class="type">char</span>)i &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-YetnotherrokenKeoard"><a href="#B-YetnotherrokenKeoard" class="headerlink" title="B YetnotherrokenKeoard"></a>B YetnotherrokenKeoard</h2><h1 id="栈-cf1000"><a href="#栈-cf1000" class="headerlink" title="栈 #cf1000"></a>栈 #cf1000</h1><ul>
<li>遇到 <code>b</code> 时，就将最后一个小写字母删除</li>
<li>遇到 <code>B</code> 时，就将最后一个大写字母删除</li>
<li>如果已经没有满足要求的了，则忽略。<br>给定一个序列，在处理完所有按键后输出键入的字符串。<br>($1 \le t \le 1000$), $\sum\limits<em>{i=1}^t|a</em>{i}|$ $10^6$. $\text{a is not null}$.<br>例如：ARaBbbitBaby-&gt;ity</li>
</ul>
<p>我写的超时了，时间复杂度：$O(n^2)$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t;string a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        vector&lt;<span class="type">char</span>&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">islower</span>(b[i]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        b.<span class="built_in">erase</span>(b.<span class="built_in">begin</span>() + i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">isupper</span>(b[i]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        b.<span class="built_in">erase</span>(b.<span class="built_in">begin</span>() + i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.<span class="built_in">push_back</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : b)</span><br><span class="line">            cout &lt;&lt; c;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了解决这个问题，有必要快速支持删除。为此，可以保持<strong>两个堆栈</strong>：</p>
<ul>
<li>一个具有大写字母的位置，</li>
<li>一个具有小写字母的位置。</li>
<li>在删除时，需要以某种方式标记该位置的字符不应该被输出。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jiangly的代码</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string s;</span><br><span class="line">    std::cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; u, l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!u.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                u.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;b&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!l.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                l.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (std::<span class="built_in">isupper</span>(s[i])) &#123;</span><br><span class="line">            u.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; u.<span class="built_in">size</span>() || j &lt; l.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; u.<span class="built_in">size</span>() &amp;&amp; (j == l.<span class="built_in">size</span>() || u[i] &lt; l[j])) &#123;</span><br><span class="line">            std::cout &lt;&lt; s[u[i++]];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            std::cout &lt;&lt; s[l[j++]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Removal-of-Unattractive-Pairs"><a href="#C-Removal-of-Unattractive-Pairs" class="headerlink" title="C Removal of Unattractive Pairs"></a>C Removal of Unattractive Pairs</h2><h1 id="cf1100"><a href="#cf1100" class="headerlink" title="cf1100"></a>cf1100</h1><p>弗拉德找到了一个由 $n$ 个小写字母组成的字符串 $s$ ，他想让这个字符串越短越好。</p>
<ul>
<li>只要它们不同，就可以从 $s$ 中任意删除对<strong>相邻</strong>的字符。<br>通过任意数量的删除可以得到的最小长度是多少？<br>($1 \le t \le 10^4$)，($1 \le n \le 2 \cdot 10^5$) ，$\sum\limits<em>{i=1}^t\mid s</em>{i}\mid\leq 2\cdot 10^5$.<br>例如：$\text{aabc}\to \text{ac}\to \text{“”}$.</li>
</ul>
<p>考虑一个有限字符串: 只有两种情况</p>
<ul>
<li>字符串中的所有字符都是相同的，</li>
<li>可以删除某些字符对。<br>如果某个字符在字符串中出现的次数超过 $\lfloor \frac{n}{2} \rfloor$ ，那么最终的字符串将始终只包含这个字符，<br>否则，无论删除顺序如何，我们都可以删除所有可能的字符对。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表述为：</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="number">2</span>*maxs&gt;size)</span><br><span class="line">	 cout &lt;&lt; <span class="number">2</span> * maxs - size &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">	 cout &lt;&lt; size % <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>则 <code>ans = max(size % 2, 2 * (*max_element(num.begin(), num.end())) - size)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string a; <span class="type">int</span> t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line">        cin &gt;&gt; size &gt;&gt; a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : a)</span><br><span class="line">            num[v - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="built_in">sort</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>());</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(size % <span class="number">2</span>, <span class="number">2</span> * (*<span class="built_in">max_element</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>())) - size) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Jumping-Through-Segments"><a href="#D-Jumping-Through-Segments" class="headerlink" title="D Jumping Through Segments"></a>D Jumping Through Segments</h2><h1 id="cf1400-二分"><a href="#cf1400-二分" class="headerlink" title="cf1400 #二分"></a>cf1400 #二分</h1><p>求一个最小的移动距离 $k$ 使得能满足每次移动后都能在目标的 $[l, r]$ 区间内。<br>$\text{example 1 }\boxed{\begin{align}&amp;5\&amp;1 &amp;5\&amp;3 &amp;4\&amp;5 &amp;6\&amp;8 &amp;10\&amp;0 &amp;1\end{align}}\to \min(k) \text{ is }8-1=7.$</p>
<script type="math/tex; mode=display">\text{example 2 }\boxed{\begin{align}&3\\&3 &8\\&10 &18\\&6 &11\end{align}}\min(k)\text{ is } \frac{10}{2}=5</script><p>$\text{example 2}$ 玩家可以采取以下行动：</p>
<ul>
<li>从点 $0$ 移动到点 $5$（$3 \le 5 \le 8$）;</li>
<li>从点 $5$ 移动到点 $10$（$10 \le 10 \le 18$）;</li>
<li>从点 $10$ 移动到点 $7$（$6 \le 7 \le 11$）。<br>请注意，对于最后一步，玩家可以选择不移动，仍然完成关卡。</li>
</ul>
<p>在 $[1，10^{9}]$ 之间进行二分查找，直到找到最佳的 $k$.<br><code>check</code> 函数：<br>用于检查在给定长度为 $k$ 的情况下，是否存在一种方式将所有的线段覆盖。</p>
<ul>
<li>初始化 <code>ll</code> 和 <code>rr</code> 为 0，表示当前覆盖的区间的左右边界为 0。</li>
<li>对于每个线段 $[a, b]$：<br>a. 计算当前覆盖的区间的左边界为 <code>max (ll - k, a)</code>，表示在保证覆盖的情况下，尽可能向左移动。<br>b. 计算当前覆盖的区间的右边界为 <code>min (rr + k, b)</code>，表示在保证覆盖的情况下，尽可能向右移动。<br>c. 如果当前覆盖的区间的左边界大于右边界，则返回 <code>false</code>，表示无法覆盖所有线段。</li>
<li>如果成功遍历了所有线段并且都能够被覆盖，则返回 <code>true</code>，表示存在一种方式将所有线段覆盖在长度为 $k$ 的情况下。<br><code>check</code> 函数的作用很重要，但是如何证明其正确性还是我的一个问题。</li>
</ul>
<p>二分搜索：$\text{我仍然没有想出来}$<br>![[Pasted image 20231213195628.png]]<br>将二维的 <code>vector&lt;vector&lt;int&gt;&gt;</code> 变为 <code>vector&lt;array&lt;int, 2&gt;&gt;</code> 节省了不少空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k, vector&lt;array&lt;<span class="type">int</span>, <span class="number">2</span>&gt;&gt; &amp;seg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ll = <span class="number">0</span>, rr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [a,b] : seg)</span><br><span class="line">    &#123;</span><br><span class="line">        ll = <span class="built_in">max</span>(ll - k, a),rr = <span class="built_in">min</span>(rr + k, b);</span><br><span class="line">        <span class="keyword">if</span> (ll &gt; rr) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>,2&gt;&gt; <span class="built_in">seg</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        seg[i] = &#123;a, b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">-1</span>, r = <span class="number">1000000000</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (r + l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid, seg))</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Good-Triples"><a href="#E-Good-Triples" class="headerlink" title="E Good Triples"></a>E Good Triples</h2><h1 id="cf1600"><a href="#cf1600" class="headerlink" title="cf1600"></a>cf1600</h1><p>给出 $n$, 找出满足 $a+b+c=n \cap f(a)+f(b)+f(c)=f(n)$ 的个数。$f(x)$ 代表 $x$ 各位数字之和。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>n</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
</tr>
</thead>
<tbody>
<tr>
<td>ans</td>
<td>1</td>
<td>3</td>
<td>6</td>
<td>10</td>
<td>15</td>
<td>21</td>
<td>28</td>
<td>36</td>
<td>45</td>
<td>55</td>
</tr>
</tbody>
</table>
</div>
<p>$n\geq 10,ans(n)=\prod ans(n\text{的各位数字})$</p>
<p><code>int x=n%10,ans *= (x + 1) * (x + 2) / 2,n/=10;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t, a[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">36</span>, <span class="number">45</span>, <span class="number">55</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">while</span> (n)</span><br><span class="line">            ans *= a[n % <span class="number">10</span>], n /= <span class="number">10</span>;<span class="comment">//ans *= (x + 1) * (x + 2) / 2,n/=10;//jiangly写的</span></span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Shift-and-Reverse"><a href="#F-Shift-and-Reverse" class="headerlink" title="F Shift and Reverse"></a>F Shift and Reverse</h2><h1 id="cf1800"><a href="#cf1800" class="headerlink" title="cf1800"></a>cf1800</h1><p>给定一个整数数组 $a_1，a_2，\ldots，a_n$。你可以用这个数组进行两种类型的操作：</p>
<ul>
<li>shift：将数组的最后一个元素移到第一个位置，并将所有其他元素向右移动，因此您将获得数组 $a<em>n，a_1，a_2，\ldots，a</em>{n-1}$。</li>
<li>Reverse：反转整个数组，所以你得到数组 $a<em>n，a</em>{n-1}，\ldots，a_1$。<br>你的任务是使用最少的操作数对数组进行非降序排序. 不可能则输出 <code>-1</code>.</li>
</ul>
<p>让我们<strong>把数组写出来两次</strong>，然后计算数组增加和减少的部分。这样，我们就能找到能对数组进行排序的所有可能的移动。</p>
<blockquote>
<p>down: 非递增</p>
</blockquote>
<ul>
<li>如果从位置 <code>st</code> 开始，数组 <code>a[st]</code> 到 <code>a[st + n - 1]</code> 是非递增的，那么我们只需要将这部分序列移至数组的前部，然后<strong>反转</strong>整个数组即可。移位的次数就是 <code>st + 1</code>，反转的次数为 <code>1</code>，因为每次移位都会将最后一个元素放到第一个，所以这部分的最小操作次数就是 <code>min(st + 1, n - st + 1)</code>，代表了向左或者向右移位的次数。再反转一次，所以操作次数总合为 <code>st + 1</code> 或是 <code>n - st + 1</code>。<blockquote>
<p>up: 非递减</p>
</blockquote>
</li>
<li>如果从位置 <code>st</code> 开始，数组 <code>a[st]</code> 到 <code>a[st + n - 1]</code> 是非递减的，我们只需要将这部分序列移至数组的前部即可。移位次数为 <code>st + 1</code>。然而，由于每次移位都会将最后一个元素放到第一个，所以需要再反转一次。这样总的操作次数就为 <code>st + 2</code>。另外一种情况就是，我们仍然可以选择向另一个方向移位，也就是从尾部的 <code>n - st</code> 个元素向后累推，然后反转一次，操作次数就是 <code>n - st + 1</code>。但是考虑到 <code>st</code> 的位置肯定是非降序的，因此可以直接将其移位至队首，然后反转整个数组，操作次数为 <code>n - st</code>。所以这部分的最小操作次数就是 <code>min(st + 2, n - st)</code>。<br>所以我们就得到了从各个位置开始，可以使得整个数组非降序的最小操作次数。再各种情况中取最小值，就是答案。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//core：</span></span><br><span class="line">when down:</span><br><span class="line">ans = <span class="built_in">min</span>(&#123;ans,st + <span class="number">1</span>, n - st + <span class="number">1</span>&#125;);</span><br><span class="line">when up:</span><br><span class="line">ans = <span class="built_in">min</span>(&#123;ans, st + <span class="number">2</span>, n - st&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t, n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">2</span> * n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        <span class="built_in">copy</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>() + n, a.<span class="built_in">begin</span>() + n);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_sorted</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>() + n))<span class="comment">// spj</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;0&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">// down</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> st = i, cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= <span class="number">2</span> * n - <span class="number">1</span> &amp;&amp; a[i] &gt;= a[i + <span class="number">1</span>])</span><br><span class="line">                i++, cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= n)</span><br><span class="line">                ans = <span class="built_in">min</span>(ans,<span class="built_in">min</span>(st + <span class="number">1</span>, n - st + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">// up</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> st = i, cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= <span class="number">2</span> * n - <span class="number">1</span> &amp;&amp; a[i] &lt;= a[i + <span class="number">1</span>])</span><br><span class="line">                i++, cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= n)</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">min</span>(st + <span class="number">2</span>, n - st));<span class="comment">//(if(!st)ans=0;)&lt;-&gt;(spj)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == INT_MAX)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-Lights"><a href="#G-Lights" class="headerlink" title="G Lights"></a>G Lights</h2><h1 id="cf2200"><a href="#cf2200" class="headerlink" title="cf2200"></a>cf2200</h1><p>[[浅谈基环树（环套树）]] (基环树：$n$ 点 $n$ 边的连通图) [[基环树]]<br><a href="#疑惑">抽象为不懂的部分</a><br>输入的第一行包含一个整数 $t$（$1≤t≤10^4$）-测试用例的数量。<br>对于每个测试用例</p>
<ul>
<li>第一行包含整数 $n$（$2 \le n \le 10^5$）-灯的数量。</li>
<li>第二行包含 $n$ 个字符的字符串，灯的初始状态。字符“0”表示相应的灯关闭，“1”表示灯打开。</li>
<li>第三行包含 $n$ 个整数 $a_i$（$1 \le a_i \le n$，$a_i \neq i$）-开关 $i$ 改变灯 $i$ 和灯 $a_i$ 的状态。<br>保证所有测试用例的 $n$ 之和不超过 $2 \cdot 10^5$<br>关闭所有的灯使用最少数量的开关，或者说这是不可能的。<br>对于每个测试用例</li>
<li>输出整数 $k$，即要使用的最小开关数，然后在单独的行中输出 $k$ 开关列表。</li>
<li>无法关闭所有的灯，则输出 $-1$。</li>
</ul>
<p>例如 $n=5$, 字符串为 $11101$ , $a[5]={4, 3 ,4 ,2, 2}$<br>则： $\text{k=3}$ ,开关顺序为 $1,5,3$.</p>
<ul>
<li>当选择 1 时，字符串变为 $01111$</li>
<li>当选择 5 时，字符串变为 $00110$</li>
<li>当选择 3 时，字符串变为 $00000$</li>
</ul>
<p><mark style="background: #FFB8EBA6;">官方题解</mark>：<br>让我们构建一个有向图，其中一条边从顶点 $i$ 到顶点 $a_i$ 。在这样的图中，每个顶点正好有一条边，每个相连的部分正好有一个循环。</p>
<p>首先，我们将关闭所有不属于循环的灯光；这种关闭顺序是唯一的：我们将移除所有没有边进入的已关闭顶点，然后关闭并移除已打开的顶点。</p>
<p>之后，只剩下循环的组成部分，其中一些可能还亮着灯。考虑从 $i$ 到 $a_i$ 循环中的任何一条边，我们要么按下开关 $i$ ，要么不按。为了计算这些情况下的操作次数，我们将使用与之前相同的算法。</p>
<h3 id="jiangly-的代码"><a href="#jiangly-的代码" class="headerlink" title="jiangly 的代码"></a>jiangly 的代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, _;</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// jiangly的代码</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">deg</span><span class="params">(n)</span>,ans</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        a[i]--, deg[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//topsort</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!deg[i])</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s[x] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[x] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            s[a[x]] ^= <span class="number">1</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (--deg[a[x]] == <span class="number">0</span>)</span><br><span class="line">            q.<span class="built_in">push</span>(a[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//end topsort</span></span><br><span class="line">    <span class="comment">//core</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!deg[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> j = i, t = <span class="number">0</span>, len = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (deg[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                t ^= <span class="number">1</span>;</span><br><span class="line">            res += t;</span><br><span class="line">            deg[j] = <span class="number">0</span>;</span><br><span class="line">            j = a[j];</span><br><span class="line">            len += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                t ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (t == (res &lt; len - res))</span><br><span class="line">                ans.<span class="built_in">push_back</span>(j);</span><br><span class="line">            j = a[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//end core</span></span><br><span class="line">    cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : ans)</span><br><span class="line">        cout &lt;&lt; x + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>), cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="官方的代码"><a href="#官方的代码" class="headerlink" title="官方的代码"></a>官方的代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">    &#123;</span><br><span class="line">        string ss;</span><br><span class="line">        cin &gt;&gt; ss;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            s[i] = ss[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i], a[i]--;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        d[a[i]]++;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (d[i] == <span class="number">0</span>)</span><br><span class="line">            z.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; z.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = z[i];</span><br><span class="line">        <span class="type">int</span> y = a[x];</span><br><span class="line">        <span class="keyword">if</span> (s[x])</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(x);</span><br><span class="line">            s[x] = !s[x];</span><br><span class="line">            s[y] = !s[y];</span><br><span class="line">        &#125;</span><br><span class="line">        d[y]--;</span><br><span class="line">        <span class="keyword">if</span> (d[y] == <span class="number">0</span>)</span><br><span class="line">            z.<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">u</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &amp;&amp; !u[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = i;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">            vector&lt;<span class="type">bool</span>&gt; ps;</span><br><span class="line">            <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!u[x])</span><br><span class="line">            &#123;</span><br><span class="line">                p.<span class="built_in">push_back</span>(x);</span><br><span class="line">                ps.<span class="built_in">push_back</span>(s[x]);</span><br><span class="line">                c += s[x];</span><br><span class="line">                u[x] = <span class="literal">true</span>;</span><br><span class="line">                x = a[x];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> k = p.<span class="built_in">size</span>();</span><br><span class="line">            p.<span class="built_in">push_back</span>(x);</span><br><span class="line">            ps.<span class="built_in">push_back</span>(s[x]);</span><br><span class="line">            <span class="keyword">if</span> (c % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">            vector&lt;<span class="type">bool</span>&gt; ps1 = ps;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || ps1[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    v1.<span class="built_in">push_back</span>(p[j]);</span><br><span class="line">                    ps1[j] = !ps1[j];</span><br><span class="line">                    ps1[j + <span class="number">1</span>] = !ps1[j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">            vector&lt;<span class="type">bool</span>&gt; ps2 = ps;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j != <span class="number">0</span> &amp;&amp; ps2[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    v2.<span class="built_in">push_back</span>(p[j]);</span><br><span class="line">                    ps2[j] = !ps2[j];</span><br><span class="line">                    ps2[j + <span class="number">1</span>] = !ps2[j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v1.<span class="built_in">size</span>() &lt; v2.<span class="built_in">size</span>())</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> x : v1)</span><br><span class="line">                    res.<span class="built_in">push_back</span>(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> x : v2)</span><br><span class="line">                    res.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : res)</span><br><span class="line">        cout &lt;&lt; x + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h3><blockquote>
<p>[!question]- 疑惑<br>我到拓扑排序都是理解的，现在我把这个题目抽象一下，抽象为只有我不懂的部分。</p>
<p>[!info]+ 抽象后的题目</p>
<h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>现给你一个图，这个图只含有环(数量不唯一)，每个点都有它自己的状态 ${0,1}$，每次选定一个点之后，同时这个点绑定的点的状态也会随着改变。题目保证有解。</p>
<h5 id="INput"><a href="#INput" class="headerlink" title="INput"></a>INput</h5><p>输入第一行包含一个整数，代表点的个数。<br>输入第二行包含一个字符串，代表这个点的状态<br>输入第三行包含一个数组，代表改变这个点的状态后同时会被改变状态的节点，即绑定的节点。</p>
<h5 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h5><p>第一行输出使得每个节点的状态都变为 <code>0</code> 时，选定节点数目的最小值。<br>第二行输出方案情况</p>
<h5 id="Sample-INput"><a href="#Sample-INput" class="headerlink" title="Sample INput"></a>Sample INput</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">011</span><br><span class="line">2 3 1</span><br></pre></td></tr></table></figure>
<h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h5 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h5><p>由于 2 节点绑定的是 3 节点，所以只需要选择 2 节点就可以使每个节点的状态都为 <code>0</code> 。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
</search>
